// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  // id   Int @id @default(autoincrement())
  id String @id 
  name String @db.VarChar(255)
  email String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  links Link[]
  posts Post[] 
  comments Comment[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  verified Boolean @default(false)
}
model Post {
  id String @id 
  title String @db.VarChar(100)
  body String 
  //this field would be a merge of id and authorId so we can use update query instead of updateMany
  updateCheckField String @unique
  published Boolean?
  authorId String 
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  comments Comment[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  
}

model Comment {
  id String @id 
  text String
  //this field would be a merge of id, authorId and postId so we can use update query instead of updateMany
  updateCheckField String @unique
  authorId String 
  postId String 
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
}

model Link {
  id String @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text String 
  //this field would be a merge of id, userId so we can use update query instead of updateMany
  updateCheckField String @unique
  name String
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  
}
